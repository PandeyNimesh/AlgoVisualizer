{
    "linear_datastructure":[{
        "id": 1,
        "mediaUrl": "./bubble-sort.gif",
        "slug": "bubble-sort",
        "sortingType": "Bubble Sort",
        "sortingDesc": "Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order."
    }, {
        "id": 3,
        "mediaUrl": "./selection-sort.mp4",
        "slug": "selection-sort",
        "sortingType": "Selection Sort",
        "sortingDesc": "Selection sort is a simple sorting algorithm. This sorting algorithm is an in-place comparison-based algorithm in which the list is divided into two parts, the sorted part at the left end and the unsorted part at the right end."
    }, {
        "id": 2,
        "mediaUrl": "./merge-sort.gif",
        "slug": "merge-sort",
        "sortingType": "Merge Sort",
        "sortingDesc": "Merge Sort is a Divide and Conquer algorithm. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves."
    }],
    "nonlinear_datastructure":[{
        "id": 1,
        "mediaUrl": "./bfs.gif",
        "slug": "bfs-sort",
        "sortingType": "BFS Traversal",
        "sortingDesc": "Breadth First Traversal (or Search) for a graph is similar to Breadth First Traversal of a tree. The only catch here is, unlike trees, graphs may contain cycles, so we may come to the same node again"
      },{
        "id":2,
        "mediaUrl": "./dfs.gif",
        "slug": "dfs-sort",
        "sortingType": "DFS Traversal",
        "sortingDesc": "Depth First Traversal (or Search) for a graph is similar to Depth First Search of a tree. The only catch here is, unlike trees, graphs may contain cycles, so we may come to the same node again"
      }
    ]
}